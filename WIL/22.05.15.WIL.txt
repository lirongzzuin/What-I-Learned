22.05.15. 일요일

항해99 D+7

오늘은 항해99를 시작하고 처음으로 맞는 일요일이자 휴일이며, 처음으로 WIL을 쓰는 날이다.
지난 일주일이 뭔가 엄청 빨리 지나간 것 같기도 하고, 또 어떻게 보면 엄청 길게 느껴지기도 했던 것 같다.
일주일 동안 두 팀을 경험했고, 또 하고 있고, 한 가지 미니 프로젝트를 마쳤고, 새로운 언어인 Java를 처음 만났다.
내가 낯을 가리는 성격이라 아직 Java와 다 친해지진 못 했지만, 억지로라도 친해져야 하는 사이이니 만큼, 더 열심히 구애를 해야될 것 같다.

이번 주에는 처음으로 미니 프로젝트를 팀 단위로 진행해보면서, 역할 분담을 해서 하나의 프로젝트를 완성해보는 경험을 했다.
나는 로그인/회원가입/로그아웃 페이지를 만들기로 했었고, 이 페이지를 만들 때 "JWT"라는 걸 처음 알게 되었다.

	JWT란, JSON Web Token,은 말 그대로 JSON 포맷을 이용하여 사용자에 대한 속성을 저장하는 Claim  기반의 웹토큰을 의미한다. JWT는 Token 자체를 정보로 사용하는
Self-Contained 방식으로 정보를 안전하게 전달한다. 주로 사용자 인증이나 정보 전달에 사용된다. JWT를 이용하면 Client는 자신의 정보를 보는 것은 가능하지만
수정은 불가능하다. 그 데이터를 수정하려면 반드시 서버를 통해서만 가능하다.
		JWT를 사용하는 이유는 다음과 같다.
	1. 토큰 기반 인증 방식이기 때문에, Session에 사용자 정보를 저장할 필요가 없기 때문에 Session Server가 필요없다. 따라서, 서버의 부담을 줄일 수 있다.
	2. JWT는 마이크로서비스(Microservice)를 위해 만들어졌다고 불 수 있고, Microservice의 인증(authentication), 인가(authorization)에 사용할 수 있는 서명된 JSON이다.
	3. JWT를 사용하면 Session을 통한 방식과 달리 서버 측 부하를 낮출 수 있고, 능률적인 접근 권한 관리를 할 수 있으며, 분산/클라우드 기반 Infra-structure에 더 잘 대응할 수 있다.
		다만, JWT를 사용할 때 발생할 수 있는 단점과 고려사항은 다음과 같다.
	1.  Self-contained: 토큰 자체에 정보를 담고 있으므로 양날의 검이 될 수 있다. (토큰만 털려도 정보까지 지못미...)
	2. 토큰 길이: 토큰의 페이로드(Payload)에 3종류의 클레임을 저장하기 떄문에, 정보가 많아질수록 토큰의 길이가 늘어나 네트워크에 부하를 줄 수 있다.
	3. Payload 인코딩: 페이로드(Payload) 자체는 암호화 된 것이 아니라, BASE64로 인코딩 된 것이다. 중간에 페이로드(Payload)를 탈취하여 디코딩하면 데이터를 볼 수 있으므로,
	JWE로 암호화하거나 페이로드(Payload)에 중요 데이터를 넣으면 안된다.
	4. Stateless: JWT는 상태를 저장하지 않기 때문에 한 번 만들어지면 제어가 불가능하다. 즉, 토큰을 임의로 삭제하는 것이 불가능하므로 토큰 만료 시간을 꼭 넣어줘야한다.(토큰을 쿠키에 저장하고 이를 삭제하는 방법으로 극복 가능?)
	5. Store Token: 토큰은 클라이언트 측에서 관리해야 하기 때문에, 토큰을 저장해야 한다.

그리고 항해99 시작 전에 들었던 웹개발 종합반부터 쭉 이어진 API.

	API(Application Programming Interface)란, 운영체제나 C, C++ 등과 같은 컴퓨터 언어로 응용 프로그램을 만들 때, 윈도우를 만들고 파일을 여는 것과 같은 처리를 할 수 있는 함수 꾸러미를 말한다.
라이브러리는 함수들의 집합이라 할 수 있는데, 미리 만든 함수를 모아 놓은 곳을 말한다. 도서관에서 필요한 책을 빌리듯 라이브러리에서 필요한 함수를 찾아 쓸 수 있는 것이다.

일주일이라는 시간이 어떻게보면 굉장히 짧은 시간이지만, 항해99가 추구하는 "압축성장"이라는 단어가 뜻하듯이, 일주일동안 거의 90시간이 넘는 시간동안 코딩을 하면서
비전공자인 나도 컴퓨터와 조금 가까워진 느낌??이다. 그리고 작지만 미니 프로젝트를 팀 단위로 하나 완성하고 그걸 웹사이트에 게시하면서 느낀 뿌듯함은 앞으로 나아가는 원동력이 될 것 같다.
아직 과정의 10%도 지나지 않은 시점이지만, 시작이 반이라는 말이 있듯이, 차분히 또 꾸준히 해나간다면 꼭 개발자로서 취직도 할 수 있을거라 믿고, 더 나아가서 좋은 개발자로 거듭날 수 있을 것 같은 희망찬 기분이 든다.