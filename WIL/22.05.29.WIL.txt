22.05.29. 일요일

항해99 D+21

3주일이 지났다. 첫 주에 미니 프로젝트를 하고나서 그 뒤로 2주 이상 자바와 스프링에 대해서 배우고 있다.
지난 한 주는 Spring 기본 주차를 마치고 숙련 주차에 접어 들었다. 기본 주차에서는 Spring에서 어떻게 코딩을
해야하는지 아는 주차였다면, 숙련 주차에서는 로그인과 회원가입, 권한별 게시물 관리 등 더 다양하고
기능적인 요소들을 배우게 된다. 로그인을 하는데도 폼로그인, 소셜로그인, JWT로그인 등 다양한 로그인 방법이
있고, 이를 관리하는 방법에도 여러가지 요소들이 있었다.
Controller, Service, Repository를 나누는 이유에 대해서 배웠고, 대부분의 기능적인 역할은 Service에서 이루어진다는
것을 알게 되었다. Repository는 메서드만 넣어두는 interface로 만들어서 사용하고, model이나 domain같은 폴더를 
만들어서 주로 사용한다고 한다. 현업에서도 비슷한 맥락으로 일을 한다고 하니까, 익숙해지는게 좋을것 같다.
이번주가 지나고 다음주까지 Spring을 배우고 나면 미니 프로젝트를 진행하게 된다. 진짜 배운것들을 써먹어보는
첫 걸음이 될 것이다. 그 전까지 최대한 Spring에 익숙해지고 배우도록 노력해야 할 것 같다.

	DI(Dependency Injection)는 스프링이 다른 프레임워크와 차별화되어 제공하는 의존 관계 주입 기능으로,
객체를 직접 생성하는게 아니라 외부에서 생성한 후 주입 시켜주는 방식이다. DI(의존성 주입)를 통해서 모듈 간의 결합도도
낮아지고 유연성이 높아진다. (결합도가 너무 높으면 유연성이 현저히 떨어진다) 
	스프링에서는 객체를 Bean이라고 부러고, 프로젝트가 실행될 때 사용자가 Bean으로 관리하는 객체들의 생성과
소멸에 관련된 작업을 자동적으로 수행해주는데 객체가 생성되는 곳을 스프링에서는 Bean 컨테이너라고 부른다.
	Ioc(Inversion of Control)이란, "제어의 역전"이라는 의미로, 말 그대로 메소드나 객체의 호출작업을 개발자가
결정하는 것이 아니라, 외부에서 결정되는 것을 의미한다. IoC는 간단히 말해, "제어의 흐름을 바꾼다."라고 한다. 객체의
의존성을 역전시켜 객체 간의 결합도를 줄이고 유연한 코드를 작성할 수 있게 하여 가독성 및 코드 중복, 유지, 보수를 편하게
할 수 있게 한다. 
강하게 결합되어 있다면 객체가 다른 곳에 사용될 때 class에서 변경을 해줄 필요가 있어 번거로운 일이 많이 발생한다.

앞으로 2주 정도 뒤부터는 미니프로젝트, 클론코딩, 실전프로젝트가 이어진다. 진짜 코딩을 해보는건 그때부터라서 조금 
설레기도 한다. 그 전에! 우선 이번 주차 과제부터 열심히!