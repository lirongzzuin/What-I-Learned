22.06.05. 일요일

항해99 D+28

이제 4주가 지났다. 뭔가 엄청 빠르게 지나간 느낌이다 이제 오는 금요일에 조가 바뀌면 그때부터는
이제 프론트엔드와 같이 협업을 하게된다. 막연하게 내가 지금 무엇인가 만들 수 있는 실력인가?
하는 의문부터 생기지만 어떻게 생각하면 오히려 빨리 그 날이 왔으면 하는 마음도 있다.
이렇게 이론을 강의를 보면서 지루하게 배우는것보다, 차라리 어떤 프로젝트를 만들어보면서
익히는게 더 몸에 익고 빠르게 배울수 있지 않을까하는 기대감 때문이다.
오늘은 홍팍님의 강의가 있다는 걸 알게되어서 내일은 홍팍님 강의를 한 번 들어볼 생각이다.
실무 위주의 강의내용이기 때문에 프로젝트를 수행하는데 있어서 도움이 많이 될 것 같다.
이번주 WIL 과제는  ORM, SQL, MVC에 대해서 알아보는 것이다.

	첫번째, ORM이란 Object Relational Mapping 객체관계매핑의 준말이다. 객체와 관계형
데이터베이스의 데이터를 자동으로 매핑(연결)해주는 것을 말한다. 객체 지향 프로그래밍은 클래스를
사용하고, 관계형 데이터베이스는 테이블을 사용한다. 객체 모델과 관계형 모델 간에 불일치가 존재하기
때문에, ORM을 통해 객체 간의 관계를 바탕으로 SQL을 자동으로 생성하여 불일치를 해결한다.
ORM의 장점으로는 객체 지향적인 코드로 인해 더 직관적이고 비즈니스 로직에 집중할 수 있게 도와준다는
점과, 재사용 및 유지보수의 편리성, DBMS에 대한 종속성이 줄어드는 점 등이 있다. 단점으로는 완벽한
ORM으로만 서비스를 구현하기 어렵다는 점이 있다. 사용하기는 편리하지만 설계는 매우 신중해야 하며,
프로젝트의 복잡성이 매우 커질 경우 난이도 또한 올라갈 수 있다는 단점이 있다.
	두번째, SQL이란 Structured Query Language의 줄임말이다. SQL은 관계형 데이터베이스 관리
시스템(RDBMS)의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어이다. 관계형 데이터베이스
관리 시스템에서 자료의 검색과 관리, 데이터베이스 스키마 생성과 수정, 데이터베이스 객체 접근 조정
관리를 위해 고안되었다. 많은 수의 데이터베이스 관련 프로그램들이 SQL을 표준으로 채택하고 있다.
	마지막으로, MVC는 Model View Controller의 줄임말이다. MVC는 사용자 인터페이스, 데이터
및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴이다. 소프트웨어의 비즈니스 로직과
화면을 구분하는데 중점을 두고 있다. 이러한 '관심사 분리'는 더 나은 업무의 분리와 향상된 관리를 제공한다.
MVC에 기반을 둔 몇 가지 다른 디자인 패턴으로 MVVM(모델-뷰-뷰모델), MVP(모델-뷰-프리젠터), MVM(모델-뷰-왓에버)
가 있다. MVC 소프트웨어 디자인 패턴의 세가지 부분은 다음과 같이 설명할 수 있다.
1) 모델: 데이터와 비즈니스 로직을 관리한다.
2) 뷰: 레이아웃과 화면을 처리한다.
3) 컨트롤러: 명령을 모델과 뷰 부분으로 라우팅한다.

이번 한 주도 이렇게 마무리 되었다. 시간이 느리게 간다고 생각했던게 엊그제 같은데 벌써 항해 시작 후, 
한 달이라는 시간정도가 흘렀고, 이제 5일뒤면 미니 프로젝트를 시작으로 클론코딩 그리고 마지막으로 실전
프로젝트가 이어지게 된다. 이제 진짜 내 포트폴리오가 생기게 되는 것이고, 그 너머에는 취업을 위한 준비과정이
기다리고 있다. 내가 목표로하는 개발자가 되기위해서 더 노력해야겠다고 다짐하면서 하루를 마무리한다.